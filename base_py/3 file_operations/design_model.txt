开放闭合原则：
一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。
总结：修改代码不行（关键代码不能改），添加代码可以。

里氏（Liskov）替换原则：
所有引用基类（父类）的地方必须能透明地使用其子类的对象。

依赖倒置原则：
高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。换言之，要针对接口编程，而不是针对实现编程。

接口隔离原则：
使用多个专门的接口，而不使用单一的总接口，即客户端（高层的模块或代码）不应该依赖那些它不需要的接口。

迪米特法则：
一个软件实体应当尽可能少地与其他实体发生相互作用。解耦，依赖越少越好

单一职责原则
不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。